function validate_input(key, value)

% Usage: validate_input(key, value)
%
% Description: Validate input parameters.
%
% Required Inputs:
%   key = parameter name
%   value = parameter value
%
% Outputs:
%   None

% Copyright (C) 2016 Springbok LLC <http://springbok.io/> All rights reserved.

% Check number and class of input arguments.

if nargin ~= 2
  exc = WException( ...
    'Wavefront:APT:InvalidInput', ...
    'Inputs must be key/value pairs.');
  throw(exc)
  
end % if

if ~(ischar(key))
  exc = WException( ...
    'Wavefront:APT:InvalidInput', ...
    'Input parameter name must be a string.');
  throw(exc)
  
end % if

if ~(isnumeric(value) || islogical(value))
  exc = WException( ...
    'Wavefront:APT:InvalidInput', ...
    'Input parameter value must be either numeric or logical.');
  throw(exc)
  
end % if

% Check size and value of input parameter.

switch key
  
  % Required input parameters.
  
  case 'GainMax'
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'GainMax must be a numeric scalar.');
      throw(exc)
      
    end % if
    
    if value < 0.00e+0 || value > 7.00e+2
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'GainMax is out of limits [0:700].', ...
        -5200, ...
        'APC_ERR_VAL_GAINMAX', ...
        'GainMax is out of limits [0:700].');
      throw(exc)
      
    end % if
    
    if value < 0.00e+0 || value > 1.00e+2
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'GainMax is out of limits [0:100].');
    end % if
    
  case 'Beamlet'
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Beamlet must be a numeric scalar.');
      throw(exc)
      
    end % if
    
    if value < 1.00e-5 || value > 1.80e+2
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Beamlet is out of limits [1e-5:180].', ...
        -5201, ...
        'APC_ERR_VAL_BEAMLET', ...
        'Beamlet is out of limits [1e-5:180].');
      throw(exc)
      
    end % if
    
    if value < 1.00e-3 || value > 1.80e+1
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'Beamlet is out of limits [1e-3:18].');
    end % if
    
  case 'Diameter'
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Diameter must be a numeric scalar.');
      throw(exc)
      
    end % if
    
    if value < 1.00e-5 || value > 1.00e+5
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Diameter is out of limits [1e-5:1e+5].', ...
        -5202, ...
        'APC_ERR_VAL_DIAMETER', ...
        'Diameter is out of limits [1e-5:1e+5].');
      throw(exc)
      
    end % if
    
    if value < 1.00e-2 || value > 1.00e+2
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'Diameter is out of limits [0.01:100].');
    end % if
    
  case 'Frequency'
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Frequency must be a numeric scalar.');
      throw(exc)
      
    end % if
    
    if value < 1.00e-3 || value > 1.00e+10
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Frequency is out of limits [1e-3:1e+10].', ...
        -5203, ...
        'APC_ERR_VAL_FREQUENCY', ...
        'Frequency is out of limits [1e-3:1e+10].');
      throw(exc)
      
    end % if
    
    if value < 1.00e+0 || value > 1.00e+6
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'Frequency is out of limits [1:1e+6].');
    end % if
    
  case 'Efficiency'
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Efficiency must be a numeric scalar.');
      throw(exc)
      
    end % if
    
    if value < 1.00e-5 || value > 1.00e+0
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Efficiency is out of limits [1e-5:100].', ...
        -5204, ...
        'APC_ERR_VAL_EFFICIENCY', ...
        'Efficiency is out of limits [1e-5:100].');
      throw(exc)
      
    end % if
    
    if value < 1.00e-1 || value > 1.00e+0
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'Efficiency is out of limits [0.1:100].');
    end % if
    
  case 'Phi'
    if ~(isnumeric(value) ...
        && max(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Phi must be a numeric vector (or scalar).');
      throw(exc)
      
    end % if
    
    if max(value < 0.00e+0) || max(value > 1.80e+2)
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Phi is out of limits [0:180].', ...
        -5206, ...
        'APC_ERR_VAL_PHI', ...
        'Phi is out of limits [0:180].');
      throw(exc)
      
    end % if
    
  case 'Phi0'
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Phi0 must be a numeric scalar.');
      throw(exc)
      
    end % if
    
    if value < 1.00e-5 || value > 1.80e+2
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        'Phi0 is out of limits [1e-5:180].', ...
        -5207, ...
        'APC_ERR_VAL_PHI0', ...
        'Phi0 is out of limits [1e-5:180].');
      throw(exc)
      
    end % if
    
    if value < 1.00e-3 || value > 1.80e+2
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'Phi0 is out of limits [1e-3:180].');
    end % if
    
  % Optional input parameters.
    
  case {'CoefA', 'CoefB', 'CoefC', 'CoefD', 'Phi1', 'Gmin'}
    if ~(isnumeric(value) ...
        && min(size(value) == [1, 1]))
      exc = WException( ...
        'Wavefront:APT:InvalidInput', ...
        [key, ' must be a numeric scalar.']);
      throw(exc)
      
    end % if
    
  case 'PlotFlag'
    if ~(min(size(value) == [1, 1]) ...
        && islogical(value))
      warning( ...
        'Wavefront:APT:InvalidInput', ...
        'PlotFlag must be a logical scalar.');
    end % if
    
  otherwise
    warning( ...
      'Wavefront:APT:UnknownParameterName', ...
      'Input parameter name not recognized (and ignored): %s.', key);
    
end % switch
